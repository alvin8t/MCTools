{"version":3,"file":"multipleRangeDownloader.js","sourceRoot":"","sources":["../../src/differentialDownloader/multipleRangeDownloader.ts"],"names":[],"mappings":"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","sourcesContent":["import { createHttpError, safeGetHeader } from \"builder-util-runtime\"\nimport { IncomingMessage } from \"http\"\nimport { Writable } from \"stream\"\nimport { copyData, DataSplitter, PartListDataTask } from \"./DataSplitter\"\nimport { DifferentialDownloader } from \"./DifferentialDownloader\"\nimport { Operation, OperationKind } from \"./downloadPlanBuilder\"\n\nexport function executeTasks(differentialDownloader: DifferentialDownloader, tasks: Array<Operation>, out: Writable, oldFileFd: number, reject: (error: Error) => void) {\n  const w = (taskOffset: number) => {\n    if (taskOffset >= tasks.length) {\n      if (differentialDownloader.fileMetadataBuffer != null) {\n        out.write(differentialDownloader.fileMetadataBuffer)\n      }\n      out.end()\n      return\n    }\n\n    const nextOffset = taskOffset + (differentialDownloader.options.useMultipleRangeRequest === false ? 1 : 1000)\n    _executeTasks(differentialDownloader, {\n      tasks,\n      start: taskOffset,\n      end: Math.min(tasks.length, nextOffset),\n      oldFileFd,\n    }, out, () => w(nextOffset), reject)\n  }\n  return w\n}\n\nexport function _executeTasks(differentialDownloader: DifferentialDownloader, options: PartListDataTask, out: Writable, resolve: () => void, reject: (error: Error) => void) {\n  let ranges = \"bytes=\"\n  let partCount = 0\n  const partIndexToTaskIndex = new Map<number, number>()\n  const partIndexToLength: Array<number> = []\n  for (let i = options.start; i < options.end; i++) {\n    const task = options.tasks[i]\n    if (task.kind === OperationKind.DOWNLOAD) {\n      ranges += `${task.start}-${task.end - 1}, `\n      partIndexToTaskIndex.set(partCount, i)\n      partCount++\n      partIndexToLength.push(task.end - task.start)\n    }\n  }\n\n  if (partCount <= 1) {\n    // the only remote range - copy\n    const w = (index: number) => {\n      if (index >= options.end) {\n        resolve()\n        return\n      }\n\n      const task = options.tasks[index++]\n\n      if (task.kind === OperationKind.COPY) {\n        copyData(task, out, options.oldFileFd, reject, () => w(index))\n      }\n      else {\n        const requestOptions = differentialDownloader.createRequestOptions(\"get\")\n        requestOptions.headers!!.Range = `bytes=${task.start}-${task.end - 1}`\n        const request = differentialDownloader.httpExecutor.doRequest(requestOptions, response => {\n          if (!checkIsRangesSupported(response, reject)) {\n            return\n          }\n\n          response.pipe(out, {\n            end: false\n          })\n          response.once(\"end\", () => w(index))\n        })\n        differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n        request.end()\n      }\n    }\n\n    w(options.start)\n    return\n  }\n\n  const requestOptions = differentialDownloader.createRequestOptions(\"get\")\n  requestOptions.headers!!.Range = ranges.substring(0, ranges.length - 2)\n  const request = differentialDownloader.httpExecutor.doRequest(requestOptions, response => {\n    if (!checkIsRangesSupported(response, reject)) {\n      return\n    }\n\n    const contentType = safeGetHeader(response, \"content-type\")\n    const m = /^multipart\\/.+?(?:; boundary=(?:(?:\"(.+)\")|(?:([^\\s]+))))$/i.exec(contentType)\n    if (m == null) {\n      reject(new Error(`Content-Type \"multipart/byteranges\" is expected, but got \"${contentType}\"`))\n      return\n    }\n\n    const dicer = new DataSplitter(out, options, partIndexToTaskIndex, m[1] || m[2], partIndexToLength, resolve)\n    dicer.on(\"error\", reject)\n    response.pipe(dicer)\n  })\n  differentialDownloader.httpExecutor.addErrorAndTimeoutHandlers(request, reject)\n  request.end()\n}\n\nexport function checkIsRangesSupported(response: IncomingMessage, reject: (error: Error) => void): boolean {\n  // Electron net handles redirects automatically, our NodeJS test server doesn't use redirects - so, we don't check 3xx codes.\n  if (response.statusCode!! >= 400) {\n    reject(createHttpError(response))\n    return false\n  }\n\n  if (response.statusCode !== 206) {\n    const acceptRanges = safeGetHeader(response, \"accept-ranges\")\n    if (acceptRanges == null || acceptRanges === \"none\") {\n      reject(new Error(\"Server doesn't support Accept-Ranges\"))\n      return false\n    }\n  }\n  return true\n}"]}
