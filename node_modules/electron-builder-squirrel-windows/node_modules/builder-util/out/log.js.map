{"version":3,"file":"log.js","sourceRoot":"","sources":["../src/log.ts"],"names":[],"mappings":"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","sourcesContent":["import chalk, { Chalk } from \"chalk\"\nimport _debug from \"debug\"\nimport WritableStream = NodeJS.WritableStream\n\nlet printer: ((message: string) => void) | null = null\n\nexport const debug = _debug(\"electron-builder\")\n\nexport interface Fields {\n  [index: string]: any\n}\n\nexport function setPrinter(value: ((message: string) => void) | null) {\n  printer = value\n}\n\nexport type LogLevel = \"info\" | \"warn\" | \"debug\" | \"notice\" | \"error\"\n\nexport const PADDING = 3\n\nexport class Logger {\n  constructor(protected readonly stream: WritableStream) {\n  }\n\n  messageTransformer: ((message: string, level: LogLevel) => string) = it => it\n\n  filePath(file: string) {\n    const cwd = process.cwd()\n    return file.startsWith(cwd) ? file.substring(cwd.length + 1) : file\n  }\n\n  // noinspection JSMethodCanBeStatic\n  get isDebugEnabled() {\n    return debug.enabled\n  }\n\n  info(messageOrFields: Fields | null | string, message?: string) {\n    this.doLog(message, messageOrFields, \"info\")\n  }\n\n  notice(messageOrFields: Fields | null | string, message?: string): void {\n    this.doLog(message, messageOrFields, \"notice\")\n  }\n\n  warn(messageOrFields: Fields | null | string, message?: string): void {\n    this.doLog(message, messageOrFields, \"warn\")\n  }\n\n  debug(fields: Fields | null, message: string) {\n    if (debug.enabled) {\n      this._doLog(message, fields, \"debug\")\n    }\n  }\n\n  private doLog(message: string | undefined, messageOrFields: Fields | null | string, level: LogLevel) {\n    if (message === undefined) {\n      this._doLog(messageOrFields as string, null, level)\n    }\n    else {\n      this._doLog(message, messageOrFields as Fields | null, level)\n    }\n  }\n\n  private _doLog(message: string, fields: Fields | null, level: LogLevel) {\n    const levelIndicator = \"â€¢\"\n    const color = LEVEL_TO_COLOR[level]\n    this.stream.write(`${\" \".repeat(PADDING)}${color(levelIndicator)} `)\n    this.stream.write(Logger.createMessage(this.messageTransformer(message, level), fields, level, color))\n    this.stream.write(\"\\n\")\n  }\n\n  static createMessage(message: string, fields: Fields | null, level: LogLevel, color: (it: string) => string): string {\n    let text = message\n\n    const fieldPadding = \" \".repeat(Math.max(0, 16 - message.length))\n    text += fieldPadding\n\n    if (fields != null) {\n      for (const name of Object.keys(fields)) {\n        let fieldValue = fields[name]\n        if (fieldValue != null && typeof fieldValue === \"string\" && fieldValue.includes(\"\\n\")) {\n          fieldValue = (\"\\n\" + fieldValue)\n            .replace(/\\n/g, `\\n${\" \".repeat(PADDING)}${fieldPadding}`)\n        }\n\n        text += ` ${color(name)}=${Array.isArray(fieldValue) ? JSON.stringify(fieldValue) : fieldValue}`\n      }\n    }\n\n    return text\n  }\n\n  log(message: string): void {\n    if (printer == null) {\n      this.stream.write(`${message}\\n`)\n    }\n    else {\n      printer(message)\n    }\n  }\n}\n\nconst LEVEL_TO_COLOR: { [index: string]: Chalk } = {\n  info: chalk.blue,\n  notice: chalk.yellow,\n  warn: chalk.yellow,\n  debug: chalk.gray,\n}\n\nexport const log = new Logger(process.stdout)"]}
