{"version":3,"file":"squirrelPack.js","sourceRoot":"","sources":["../src/squirrelPack.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { Arch, debug, exec, execWine, log, prepareWindowsExecutableArgs as prepareArgs, spawn } from \"builder-util\"\nimport { copyFile, walk } from \"builder-util/out/fs\"\nimport { compute7zCompressArgs } from \"electron-builder-lib/out/targets/archive\"\nimport { WinPackager } from \"electron-builder-lib/out/winPackager\"\nimport { createWriteStream, ensureDir, remove, stat, unlink, writeFile } from \"fs-extra-p\"\nimport * as path from \"path\"\n\nconst archiver = require(\"archiver\")\n\nexport function convertVersion(version: string): string {\n  const parts = version.split(\"-\")\n  const mainVersion = parts.shift()\n  if (parts.length > 0) {\n    return [mainVersion, parts.join(\"-\").replace(/\\./g, \"\")].join(\"-\")\n  }\n  else {\n    return mainVersion!\n  }\n}\n\nfunction syncReleases(outputDirectory: string, options: SquirrelOptions) {\n  log.info(\"syncing releases to build delta package\")\n  const args = prepareArgs([\"-u\", options.remoteReleases!, \"-r\", outputDirectory], path.join(options.vendorPath, \"SyncReleases.exe\"))\n  if (options.remoteToken) {\n    args.push(\"-t\", options.remoteToken)\n  }\n  return spawn(process.platform === \"win32\" ? path.join(options.vendorPath, \"SyncReleases.exe\") : \"mono\", args)\n}\n\nexport interface SquirrelOptions {\n  vendorPath: string\n  remoteReleases?: string\n  remoteToken?: string\n  loadingGif?: string\n  productName: string\n  appId?: string\n  name: string\n  packageCompressionLevel?: number\n  version: string\n  msi?: any\n\n  description?: string\n  iconUrl?: string\n  authors?: string\n  extraMetadataSpecs?: string\n  copyright?: string\n}\n\nexport interface OutFileNames {\n  setupFile: string\n  packageFile: string\n}\n\nexport class SquirrelBuilder {\n  constructor(private readonly options: SquirrelOptions, private readonly outputDirectory: string, private readonly packager: WinPackager) {\n  }\n\n  async buildInstaller(outFileNames: OutFileNames, appOutDir: string, outDir: string, arch: Arch) {\n    const packager = this.packager\n    const dirToArchive = await packager.info.tempDirManager.createTempDir({prefix: \"squirrel-windows\"})\n    const outputDirectory = this.outputDirectory\n    const options = this.options\n    const appUpdate = path.join(dirToArchive, \"Update.exe\")\n    await BluebirdPromise.all([\n      copyFile(path.join(options.vendorPath, \"Update.exe\"), appUpdate)\n        .then(() => packager.sign(appUpdate)),\n      BluebirdPromise.all([remove(`${outputDirectory.replace(/\\\\/g, \"/\")}/*-full.nupkg`), remove(path.join(outputDirectory, \"RELEASES\"))])\n        .then(() => ensureDir(outputDirectory))\n    ])\n\n    if (options.remoteReleases) {\n      await syncReleases(outputDirectory, options)\n    }\n\n    const version = convertVersion(options.version)\n    const nupkgPath = path.join(outputDirectory, outFileNames.packageFile)\n    const setupPath = path.join(outputDirectory, outFileNames.setupFile)\n\n    await BluebirdPromise.all<any>([\n      pack(options, appOutDir, appUpdate, nupkgPath, version, packager),\n      copyFile(path.join(options.vendorPath, \"Setup.exe\"), setupPath),\n      copyFile(options.loadingGif ? path.resolve(packager.projectDir, options.loadingGif) : path.join(options.vendorPath, \"install-spinner.gif\"), path.join(dirToArchive, \"background.gif\")),\n    ])\n\n    // releasify can be called only after pack nupkg and nupkg must be in the final output directory (where other old version nupkg can be located)\n    await this.releasify(nupkgPath, outFileNames.packageFile)\n      .then(it => writeFile(path.join(dirToArchive, \"RELEASES\"), it))\n\n    const embeddedArchiveFile = await this.createEmbeddedArchiveFile(nupkgPath, dirToArchive)\n\n    await execWine(path.join(options.vendorPath, \"WriteZipToSetup.exe\"), [setupPath, embeddedArchiveFile])\n\n    await packager.signAndEditResources(setupPath, arch, outDir)\n    if (options.msi && process.platform === \"win32\") {\n      const outFile = outFileNames.setupFile.replace(\".exe\", \".msi\")\n      await msi(options, nupkgPath, setupPath, outputDirectory, outFile)\n      // rcedit can only edit .exe resources\n      await packager.sign(path.join(outputDirectory, outFile))\n    }\n  }\n\n  private async releasify(nupkgPath: string, packageName: string) {\n    const args = [\n      \"--releasify\", nupkgPath,\n      \"--releaseDir\", this.outputDirectory\n    ]\n    const out = (await exec(process.platform === \"win32\" ? path.join(this.options.vendorPath, \"Update.com\") : \"mono\", prepareArgs(args, path.join(this.options.vendorPath, \"Update-Mono.exe\")))).trim()\n    if (debug.enabled) {\n      debug(`Squirrel output: ${out}`)\n    }\n\n    const lines = out.split(\"\\n\")\n    for (let i = lines.length - 1; i > -1; i--) {\n      const line = lines[i]\n      if (line.includes(packageName)) {\n        return line.trim()\n      }\n    }\n\n    throw new Error(`Invalid output, cannot find last release entry, output: ${out}`)\n  }\n\n  private async createEmbeddedArchiveFile(nupkgPath: string, dirToArchive: string) {\n    const embeddedArchiveFile = await this.packager.getTempFile(\"setup.zip\")\n    await exec(path7za, compute7zCompressArgs(\"zip\", {\n      isRegularFile: true,\n      compression: this.packager.compression,\n    }).concat(embeddedArchiveFile, \".\"), {\n      cwd: dirToArchive,\n    })\n    await exec(path7za, compute7zCompressArgs(\"zip\", {\n      isRegularFile: true,\n      compression: \"store\" /* nupkg is already compressed */,\n    }).concat(embeddedArchiveFile, nupkgPath))\n    return embeddedArchiveFile\n  }\n}\n\nasync function pack(options: SquirrelOptions, directory: string, updateFile: string, outFile: string, version: string, packager: WinPackager) {\n  // SW now doesn't support 0-level nupkg compressed files. It means that we are forced to use level 1 if store level requested.\n  const archive = archiver(\"zip\", {zlib: {level: Math.max(1, (options.packageCompressionLevel == null ? 9 : options.packageCompressionLevel))}})\n  const archiveOut = createWriteStream(outFile)\n  const archivePromise = new BluebirdPromise((resolve, reject) => {\n    archive.on(\"error\", reject)\n    archiveOut.on(\"error\", reject)\n    archiveOut.on(\"close\", resolve)\n  })\n  archive.pipe(archiveOut)\n\n  const author = options.authors\n  const copyright = options.copyright || `Copyright © ${new Date().getFullYear()} ${author}`\n  const nuspecContent = `<?xml version=\"1.0\"?>\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\n  <metadata>\n    <id>${options.appId}</id>\n    <version>${version}</version>\n    <title>${options.productName}</title>\n    <authors>${author}</authors>\n    <iconUrl>${options.iconUrl}</iconUrl>\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\n    <description>${options.description}</description>\n    <copyright>${copyright}</copyright>${options.extraMetadataSpecs || \"\"}\n  </metadata>\n</package>`\n  debug(`Created NuSpec file:\\n${nuspecContent}`)\n  archive.append(nuspecContent.replace(/\\n/, \"\\r\\n\"), {name: `${encodeURI(options.name).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\")}.nuspec`})\n\n  //noinspection SpellCheckingInspection\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n  <Relationship Type=\"http://schemas.microsoft.com/packaging/2010/07/manifest\" Target=\"/${options.name}.nuspec\" Id=\"Re0\" />\n  <Relationship Type=\"http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties\" Target=\"/package/services/metadata/core-properties/1.psmdcp\" Id=\"Re1\" />\n</Relationships>`.replace(/\\n/, \"\\r\\n\"), {name: \".rels\", prefix: \"_rels\"})\n\n  //noinspection SpellCheckingInspection\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n  <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />\n  <Default Extension=\"nuspec\" ContentType=\"application/octet\" />\n  <Default Extension=\"pak\" ContentType=\"application/octet\" />\n  <Default Extension=\"asar\" ContentType=\"application/octet\" />\n  <Default Extension=\"bin\" ContentType=\"application/octet\" />\n  <Default Extension=\"dll\" ContentType=\"application/octet\" />\n  <Default Extension=\"exe\" ContentType=\"application/octet\" />\n  <Default Extension=\"dat\" ContentType=\"application/octet\" />\n  <Default Extension=\"psmdcp\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\" />\n  <Default Extension=\"diff\" ContentType=\"application/octet\" />\n  <Default Extension=\"bsdiff\" ContentType=\"application/octet\" />\n  <Default Extension=\"shasum\" ContentType=\"text/plain\" />\n  <Default Extension=\"mp3\" ContentType=\"audio/mpeg\" />\n  <Default Extension=\"node\" ContentType=\"application/octet\" />\n</Types>`.replace(/\\n/, \"\\r\\n\"), {name: \"[Content_Types].xml\"})\n\n  archive.append(`<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<coreProperties xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xmlns=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\">\n  <dc:creator>${author}</dc:creator>\n  <dc:description>${options.description}</dc:description>\n  <dc:identifier>${options.appId}</dc:identifier>\n  <version>${version}</version>\n  <keywords/>\n  <dc:title>${options.productName}</dc:title>\n  <lastModifiedBy>NuGet, Version=2.8.50926.602, Culture=neutral, PublicKeyToken=null;Microsoft Windows NT 6.2.9200.0;.NET Framework 4</lastModifiedBy>\n</coreProperties>`.replace(/\\n/, \"\\r\\n\"), {name: \"1.psmdcp\", prefix: \"package/services/metadata/core-properties\"})\n\n  archive.file(updateFile, {name: \"Update.exe\", prefix: \"lib/net45\"})\n  await encodedZip(archive, directory, \"lib/net45\", options.vendorPath, packager)\n  await archivePromise\n}\n\nasync function msi(options: SquirrelOptions, nupkgPath: string, setupPath: string, outputDirectory: string, outFile: string) {\n  const args = [\n    \"--createMsi\", nupkgPath,\n    \"--bootstrapperExe\", setupPath\n  ]\n  await exec(process.platform === \"win32\" ? path.join(options.vendorPath, \"Update.com\") : \"mono\", prepareArgs(args, path.join(options.vendorPath, \"Update-Mono.exe\")))\n  //noinspection SpellCheckingInspection\n  await exec(path.join(options.vendorPath, \"candle.exe\"), [\"-nologo\", \"-ext\", \"WixNetFxExtension\", \"-out\", \"Setup.wixobj\", \"Setup.wxs\"], {\n    cwd: outputDirectory,\n  })\n  //noinspection SpellCheckingInspection\n  await exec(path.join(options.vendorPath, \"light.exe\"), [\"-ext\", \"WixNetFxExtension\", \"-sval\", \"-out\", outFile, \"Setup.wixobj\"], {\n    cwd: outputDirectory,\n  })\n\n  //noinspection SpellCheckingInspection\n  await BluebirdPromise.all([\n    unlink(path.join(outputDirectory, \"Setup.wxs\")),\n    unlink(path.join(outputDirectory, \"Setup.wixobj\")),\n    unlink(path.join(outputDirectory, outFile.replace(\".msi\", \".wixpdb\"))).catch(e => debug(e.toString())),\n  ])\n}\n\nasync function encodedZip(archive: any, dir: string, prefix: string, vendorPath: string, packager: WinPackager) {\n  await walk(dir, null, {\n    isIncludeDir: true,\n    consume: async (file, stats) => {\n      if (stats.isDirectory()) {\n        return\n      }\n\n      // GBK file name encoding (or Non-English file name) caused a problem\n      const relativeSafeFilePath = encodeURI(file.substring(dir.length + 1).replace(/\\\\/g, \"/\")).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\")\n      archive._append(file, {\n        name: relativeSafeFilePath,\n        prefix,\n        stats,\n      })\n\n      // createExecutableStubForExe\n      // https://github.com/Squirrel/Squirrel.Windows/pull/1051 Only generate execution stubs for the top-level executables\n      if (file.endsWith(\".exe\") && !file.includes(\"squirrel.exe\") && !relativeSafeFilePath.includes(\"/\")) {\n        const tempFile = await packager.getTempFile(\"stub.exe\")\n        await copyFile(path.join(vendorPath, \"StubExecutable.exe\"), tempFile)\n        await execWine(path.join(vendorPath, \"WriteZipToSetup.exe\"), [\"--copy-stub-resources\", file, tempFile])\n        await packager.sign(tempFile)\n\n        archive._append(tempFile, {\n          name: relativeSafeFilePath.substring(0, relativeSafeFilePath.length - 4) + \"_ExecutionStub.exe\",\n          prefix,\n          stats: await stat(tempFile),\n        })\n      }\n    }\n  })\n  archive.finalize()\n}"]}
